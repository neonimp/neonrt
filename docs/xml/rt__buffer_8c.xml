<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="rt__buffer_8c" kind="file" language="C++">
    <compoundname>rt_buffer.c</compoundname>
    <includes refid="rt__buffer_8h" local="yes">rt_buffer.h</includes>
    <includes refid="rt__buffer__private_8h" local="yes">rt_buffer_private.h</includes>
    <includes local="no">jemalloc/jemalloc.h</includes>
    <includes local="no">memory.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>src/rt_buffer/rt_buffer.c</label>
        <link refid="rt__buffer_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>rt_buffer.h</label>
        <link refid="rt__buffer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>memory.h</label>
      </node>
      <node id="8">
        <label>jemalloc/jemalloc.h</label>
      </node>
      <node id="7">
        <label>rt_buffer_private.h</label>
        <link refid="rt__buffer__private_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="rt__buffer_8c_1a1322b1a2eb1595bed6cca6f6cf42281c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
        <definition>rt_buff_t* rt_buff_new</definition>
        <argsstring>(uint8_t *value, size_t val_len)</argsstring>
        <name>rt_buff_new</name>
        <param>
          <type>uint8_t *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>val_len</declname>
        </param>
        <briefdescription>
<para>Create a new managed string from a buffer of bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to initialize the managed string with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer <computeroutput>value</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to an initialized rt_buff_t instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.c" line="6" column="11" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="6" bodyend="30"/>
        <references refid="structmanaged__buffer_1abe222f6d3581e7920dcad5306cc906a8" compoundref="rt__buffer__private_8h" startline="9">managed_buffer::data</references>
        <references refid="structmanaged__buffer_1a7360b55975153b822efc5217b7734e6a" compoundref="rt__buffer__private_8h" startline="10">managed_buffer::len</references>
        <references refid="structmanaged__buffer_1a26e9c310f0ff6151d48550c2b6b2b185" compoundref="rt__buffer__private_8h" startline="14">managed_buffer::lock</references>
        <references refid="structmanaged__buffer_1ac7cadaef976091745f65e9cd21fe4cfe" compoundref="rt__buffer__private_8h" startline="13">managed_buffer::needs_sync</references>
        <references refid="structmanaged__buffer_1af4f32f042f9ebac3aaf3870d88482e59" compoundref="rt__buffer__private_8h" startline="11">managed_buffer::ref_ct</references>
      </memberdef>
      <memberdef kind="function" id="rt__buffer_8c_1a039150cb6b9a685b4cc33a6532a79ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rt_buff_borrow</definition>
        <argsstring>(rt_buff_t *self)</argsstring>
        <name>rt_buff_borrow</name>
        <param>
          <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Get a reference to the underlying buffer of a managed string to use with functions that need a raw const char pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Never pass this pointer to a function that modifies the buffer in place, as this cause for UNDEFINED BEHAVIOUR, since the properties of the buffer are tracked by the internal state. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the managed string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the underlying buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.c" line="32" column="12" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="32" bodyend="40"/>
        <references refid="structmanaged__buffer_1abe222f6d3581e7920dcad5306cc906a8" compoundref="rt__buffer__private_8h" startline="9">managed_buffer::data</references>
        <references refid="structmanaged__buffer_1a26e9c310f0ff6151d48550c2b6b2b185" compoundref="rt__buffer__private_8h" startline="14">managed_buffer::lock</references>
        <references refid="structmanaged__buffer_1af4f32f042f9ebac3aaf3870d88482e59" compoundref="rt__buffer__private_8h" startline="11">managed_buffer::ref_ct</references>
        <referencedby refid="hashmap_8c_1a677123a939ba05d7ba7f79e2672be032" compoundref="hashmap_8c" startline="67" endline="88">hashmap_set</referencedby>
        <referencedby refid="hashmap_8c_1a8b57f0ce7e665a3bf1149e9bc4382cdd" compoundref="hashmap_8c" startline="25" endline="34">make_index</referencedby>
      </memberdef>
      <memberdef kind="function" id="rt__buffer_8c_1a9cd5013b1401115a2d15f5c6674ca261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* rt_buff_borrow_writable</definition>
        <argsstring>(rt_buff_t *self)</argsstring>
        <name>rt_buff_borrow_writable</name>
        <param>
          <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Get a write-able reference to the underlying buffer of a managed string to use with functions that need a raw const char pointer, note that the write-able reference MUST BE the only reference, this function will fail if ANY of the following is true: There is already ANY references to the buffer leased out. There is a lock on the string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Never pass this pointer to a function that modifies the buffer in place, as this cause for UNDEFINED BEHAVIOUR, since the properties of the buffer are tracked by the internal state. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the managed string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the underlying buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.c" line="42" column="6" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="42" bodyend="55"/>
        <references refid="structmanaged__buffer_1abe222f6d3581e7920dcad5306cc906a8" compoundref="rt__buffer__private_8h" startline="9">managed_buffer::data</references>
        <references refid="structmanaged__buffer_1a26e9c310f0ff6151d48550c2b6b2b185" compoundref="rt__buffer__private_8h" startline="14">managed_buffer::lock</references>
        <references refid="structmanaged__buffer_1ac7cadaef976091745f65e9cd21fe4cfe" compoundref="rt__buffer__private_8h" startline="13">managed_buffer::needs_sync</references>
        <references refid="structmanaged__buffer_1af4f32f042f9ebac3aaf3870d88482e59" compoundref="rt__buffer__private_8h" startline="11">managed_buffer::ref_ct</references>
      </memberdef>
      <memberdef kind="function" id="rt__buffer_8c_1abb767504584d542d819c76d09ebeded5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rt_buff_sizeof</definition>
        <argsstring>(const rt_buff_t *self)</argsstring>
        <name>rt_buff_sizeof</name>
        <param>
          <type>const <ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Get the size of the underlying buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to get the size of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.c" line="57" column="15" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="57" bodyend="60"/>
        <references refid="structmanaged__buffer_1a7360b55975153b822efc5217b7734e6a" compoundref="rt__buffer__private_8h" startline="10">managed_buffer::len</references>
        <referencedby refid="hashmap_8c_1a8b57f0ce7e665a3bf1149e9bc4382cdd" compoundref="hashmap_8c" startline="25" endline="34">make_index</referencedby>
      </memberdef>
      <memberdef kind="function" id="rt__buffer_8c_1ac7340ae596e0437520aa52a2b514c961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rt_buff_return</definition>
        <argsstring>(rt_buff_t *self)</argsstring>
        <name>rt_buff_return</name>
        <param>
          <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Returns a borrowed reference to the underlying buffer and decreases the reference counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the managed string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.c" line="62" column="6" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="62" bodyend="69"/>
        <references refid="structmanaged__buffer_1a26e9c310f0ff6151d48550c2b6b2b185" compoundref="rt__buffer__private_8h" startline="14">managed_buffer::lock</references>
        <references refid="structmanaged__buffer_1ac7cadaef976091745f65e9cd21fe4cfe" compoundref="rt__buffer__private_8h" startline="13">managed_buffer::needs_sync</references>
        <references refid="structmanaged__buffer_1af4f32f042f9ebac3aaf3870d88482e59" compoundref="rt__buffer__private_8h" startline="11">managed_buffer::ref_ct</references>
        <referencedby refid="hashmap_8c_1ac91522a203c1e61da2e25226e1edac94" compoundref="hashmap_8c" startline="119" endline="132">hashmap_free</referencedby>
        <referencedby refid="rt__buffer_8c_1a4da470bcb0ae4527593db158cb5a8991" compoundref="rt__buffer_8c" startline="71" endline="81">rt_buff_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="rt__buffer_8c_1a4da470bcb0ae4527593db158cb5a8991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t rt_buff_free</definition>
        <argsstring>(rt_buff_t *self)</argsstring>
        <name>rt_buff_free</name>
        <param>
          <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Destroys a managed string if it&apos;s reference counter is 0, and there is no lock on it, do not use a reference to a string passed to this function after calling it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to attempt destruction on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the string was deallocated successfully or the refcount otherwise, check the result!. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.c" line="71" column="10" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="71" bodyend="81"/>
        <references refid="structmanaged__buffer_1abe222f6d3581e7920dcad5306cc906a8" compoundref="rt__buffer__private_8h" startline="9">managed_buffer::data</references>
        <references refid="structmanaged__buffer_1a26e9c310f0ff6151d48550c2b6b2b185" compoundref="rt__buffer__private_8h" startline="14">managed_buffer::lock</references>
        <references refid="structmanaged__buffer_1af4f32f042f9ebac3aaf3870d88482e59" compoundref="rt__buffer__private_8h" startline="11">managed_buffer::ref_ct</references>
        <references refid="rt__buffer_8c_1ac7340ae596e0437520aa52a2b514c961" compoundref="rt__buffer_8c" startline="62" endline="69">rt_buff_return</references>
        <referencedby refid="hashmap_8c_1ac91522a203c1e61da2e25226e1edac94" compoundref="hashmap_8c" startline="119" endline="132">hashmap_free</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rt__buffer_8h" kindref="compound">rt_buffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rt__buffer__private_8h" kindref="compound">rt_buffer_private.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;jemalloc/jemalloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="rt__buffer_8c_1a1322b1a2eb1595bed6cca6f6cf42281c" refkind="member"><highlight class="normal"><ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*<ref refid="rt__buffer_8c_1a1322b1a2eb1595bed6cca6f6cf42281c" kindref="member">rt_buff_new</ref>(uint8_t<sp/>*value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>val_len)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*rt_buff;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rt_buff<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref>)))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>allocate<sp/>the<sp/>internal<sp/>buffer<sp/>if<sp/>this<sp/>fails,<sp/>then<sp/>free<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>whole<sp/>struct<sp/>and<sp/>return<sp/>NULL</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rt_buff-&gt;<ref refid="structmanaged__buffer_1abe222f6d3581e7920dcad5306cc906a8" kindref="member">data</ref><sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t)<sp/>*<sp/>val_len))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(rt_buff);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>string<sp/>contents<sp/>to<sp/>the<sp/>managed<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(rt_buff-&gt;<ref refid="structmanaged__buffer_1abe222f6d3581e7920dcad5306cc906a8" kindref="member">data</ref>,<sp/>value,<sp/>val_len);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>string<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_buff-&gt;<ref refid="structmanaged__buffer_1a7360b55975153b822efc5217b7734e6a" kindref="member">len</ref><sp/>=<sp/>val_len;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_buff-&gt;<ref refid="structmanaged__buffer_1ac7cadaef976091745f65e9cd21fe4cfe" kindref="member">needs_sync</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_buff-&gt;<ref refid="structmanaged__buffer_1a26e9c310f0ff6151d48550c2b6b2b185" kindref="member">lock</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>rt_buff-&gt;<ref refid="structmanaged__buffer_1af4f32f042f9ebac3aaf3870d88482e59" kindref="member">ref_ct</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rt_buff;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="rt__buffer_8c_1a039150cb6b9a685b4cc33a6532a79ec5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="rt__buffer_8c_1a039150cb6b9a685b4cc33a6532a79ec5" kindref="member">rt_buff_borrow</ref>(<ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!self-&gt;lock)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;ref_ct<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;data;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="rt__buffer_8c_1a9cd5013b1401115a2d15f5c6674ca261" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="rt__buffer_8c_1a9cd5013b1401115a2d15f5c6674ca261" kindref="member">rt_buff_borrow_writable</ref>(<ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>lease<sp/>out<sp/>a<sp/>write-able<sp/>ref<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>the<sp/>only<sp/>ref<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(self-&gt;ref_ct<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!self-&gt;lock)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Locks<sp/>the<sp/>string<sp/>because<sp/>we<sp/>are<sp/>leasing<sp/>out<sp/>a<sp/>non</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>readonly<sp/>ref,<sp/>and<sp/>it<sp/>will<sp/>also<sp/>need<sp/>a<sp/>synchronisation.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;lock<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;needs_sync<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;data;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="rt__buffer_8c_1abb767504584d542d819c76d09ebeded5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="rt__buffer_8c_1abb767504584d542d819c76d09ebeded5" kindref="member">rt_buff_sizeof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;len;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="rt__buffer_8c_1ac7340ae596e0437520aa52a2b514c961" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rt__buffer_8c_1ac7340ae596e0437520aa52a2b514c961" kindref="member">rt_buff_return</ref>(<ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;ref_ct<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(self-&gt;lock<sp/>&amp;&amp;<sp/>self-&gt;needs_sync)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;lock<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;lock;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;needs_sync<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;needs_sync;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="rt__buffer_8c_1a4da470bcb0ae4527593db158cb5a8991" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="rt__buffer_8c_1a4da470bcb0ae4527593db158cb5a8991" kindref="member">rt_buff_free</ref>(<ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!self-&gt;lock<sp/>&amp;&amp;<sp/>self-&gt;ref_ct<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(self-&gt;data);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rt__buffer_8c_1ac7340ae596e0437520aa52a2b514c961" kindref="member">rt_buff_return</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;ref_ct;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/rt_buffer/rt_buffer.c"/>
  </compounddef>
</doxygen>
