<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="wire_8h" kind="file" language="C++">
    <compoundname>wire.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">endian.h</includes>
    <includedby refid="wire_8c" local="yes">src/util/wire.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/util/wire.h</label>
        <link refid="wire_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>endian.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/util/wire.c</label>
        <link refid="wire_8c"/>
      </node>
      <node id="1">
        <label>src/util/wire.h</label>
        <link refid="wire_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="wire_8h_1ab06449599802dd97b52b2abf2c572a47" prot="public" static="no">
        <name>ALIGN</name>
        <param><defname>value</defname></param>
        <param><defname>alignment</defname></param>
        <initializer>(((value) + (alignment - 1)) &amp; ~(alignment - 1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="26" column="9" bodyfile="src/util/wire.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1a185ba45353875b6922b19a2d1d839dea" prot="public" static="no">
        <name>NRT_READ16LE</name>
        <param><defname>S</defname></param>
        <initializer>((255 &amp; (S)[1]) &lt;&lt; 8 | (255 &amp; (S)[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="28" column="9" bodyfile="src/util/wire.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1ac9da063913697daf1de00d9c7b0d4cd1" prot="public" static="no">
        <name>NRT_READ16BE</name>
        <param><defname>S</defname></param>
        <initializer>((255 &amp; (S)[0]) &lt;&lt; 8 | (255 &amp; (S)[1]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="29" column="9" bodyfile="src/util/wire.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1a9b495ddf3b39ae81080154e295c084f1" prot="public" static="no">
        <name>NRT_READ32LE</name>
        <param><defname>S</defname></param>
        <initializer>	((uint32_t)(255 &amp; (S)[3]) &lt;&lt; 030 | (uint32_t)(255 &amp; (S)[2]) &lt;&lt; 020 | (uint32_t)(255 &amp; (S)[1]) &lt;&lt; 010 | (uint32_t)(255 &amp; (S)[0]) &lt;&lt; 000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="30" column="9" bodyfile="src/util/wire.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1a40433b828eb9604867a4cf802d78eee9" prot="public" static="no">
        <name>NRT_READ32BE</name>
        <param><defname>S</defname></param>
        <initializer>	((uint32_t)(255 &amp; (S)[0]) &lt;&lt; 030 | (uint32_t)(255 &amp; (S)[1]) &lt;&lt; 020 | (uint32_t)(255 &amp; (S)[2]) &lt;&lt; 010 | (uint32_t)(255 &amp; (S)[3]) &lt;&lt; 000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="32" column="9" bodyfile="src/util/wire.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1a79217b32c2056622baa4dad4a14f9187" prot="public" static="no">
        <name>NRT_READ64LE</name>
        <param><defname>S</defname></param>
        <initializer>	((uint64_t)(255 &amp; (S)[7]) &lt;&lt; 070 | (uint64_t)(255 &amp; (S)[6]) &lt;&lt; 060 | (uint64_t)(255 &amp; (S)[5]) &lt;&lt; 050 | (uint64_t)(255 &amp; (S)[4]) &lt;&lt; 040 | (uint64_t)(255 &amp; (S)[3]) &lt;&lt; 030 | (uint64_t)(255 &amp; (S)[2]) &lt;&lt; 020 | (uint64_t)(255 &amp; (S)[1]) &lt;&lt; 010 | (uint64_t)(255 &amp; (S)[0]) &lt;&lt; 000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="34" column="9" bodyfile="src/util/wire.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1ac66fdee8548a2105d67a44e7804f7930" prot="public" static="no">
        <name>NRT_READ64BE</name>
        <param><defname>S</defname></param>
        <initializer>	((uint64_t)(255 &amp; (S)[0]) &lt;&lt; 070 | (uint64_t)(255 &amp; (S)[1]) &lt;&lt; 060 | (uint64_t)(255 &amp; (S)[2]) &lt;&lt; 050 | (uint64_t)(255 &amp; (S)[3]) &lt;&lt; 040 | (uint64_t)(255 &amp; (S)[4]) &lt;&lt; 030 | (uint64_t)(255 &amp; (S)[5]) &lt;&lt; 020 | (uint64_t)(255 &amp; (S)[6]) &lt;&lt; 010 | (uint64_t)(255 &amp; (S)[7]) &lt;&lt; 000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="36" column="9" bodyfile="src/util/wire.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1a9b0516e23f35b9a3da140be4be1e4cae" prot="public" static="no">
        <name>NRT_WRITE16LE</name>
        <param><defname>P</defname></param>
        <param><defname>V</defname></param>
        <initializer>	((P)[0] = (0x00000000000000FF &amp; (V)) &gt;&gt; 000, \
	 (P)[1] = (0x000000000000FF00 &amp; (V)) &gt;&gt; 010, (P) + 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="39" column="9" bodyfile="src/util/wire.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1acf25b536ffaeb72808752ea7d24af856" prot="public" static="no">
        <name>NRT_WRITE16BE</name>
        <param><defname>P</defname></param>
        <param><defname>V</defname></param>
        <initializer>	((P)[0] = (0x000000000000FF00 &amp; (V)) &gt;&gt; 010, \
	 (P)[1] = (0x00000000000000FF &amp; (V)) &gt;&gt; 000, (P) + 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="42" column="9" bodyfile="src/util/wire.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1abf42d1c1bfd5b7dc57f3015a355cdc48" prot="public" static="no">
        <name>NRT_WRITE32LE</name>
        <param><defname>P</defname></param>
        <param><defname>V</defname></param>
        <initializer>	((P)[0] = (0x00000000000000FF &amp; (V)) &gt;&gt; 000, \
	 (P)[1] = (0x000000000000FF00 &amp; (V)) &gt;&gt; 010, \
	 (P)[2] = (0x0000000000FF0000 &amp; (V)) &gt;&gt; 020, \
	 (P)[3] = (0x00000000FF000000 &amp; (V)) &gt;&gt; 030, (P) + 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="45" column="9" bodyfile="src/util/wire.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1a31a08a70dfa5775f8946a0718db61262" prot="public" static="no">
        <name>NRT_WRITE32BE</name>
        <param><defname>P</defname></param>
        <param><defname>V</defname></param>
        <initializer>	((P)[0] = (0x00000000FF000000 &amp; (V)) &gt;&gt; 030, \
	 (P)[1] = (0x0000000000FF0000 &amp; (V)) &gt;&gt; 020, \
	 (P)[2] = (0x000000000000FF00 &amp; (V)) &gt;&gt; 010, \
	 (P)[3] = (0x00000000000000FF &amp; (V)) &gt;&gt; 000, (P) + 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="50" column="9" bodyfile="src/util/wire.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1aeba9c7260507c2d4ccd8cbed46741b0a" prot="public" static="no">
        <name>NRT_WRITE64LE</name>
        <param><defname>P</defname></param>
        <param><defname>V</defname></param>
        <initializer>	((P)[0] = (0x00000000000000FF &amp; (V)) &gt;&gt; 000, \
	 (P)[1] = (0x000000000000FF00 &amp; (V)) &gt;&gt; 010, \
	 (P)[2] = (0x0000000000FF0000 &amp; (V)) &gt;&gt; 020, \
	 (P)[3] = (0x00000000FF000000 &amp; (V)) &gt;&gt; 030, \
	 (P)[4] = (0x000000FF00000000 &amp; (V)) &gt;&gt; 040, \
	 (P)[5] = (0x0000FF0000000000 &amp; (V)) &gt;&gt; 050, \
	 (P)[6] = (0x00FF000000000000 &amp; (V)) &gt;&gt; 060, \
	 (P)[7] = (0xFF00000000000000 &amp; (V)) &gt;&gt; 070, (P) + 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="55" column="9" bodyfile="src/util/wire.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wire_8h_1a8363db86c2ee8f8df5f675f725ab6537" prot="public" static="no">
        <name>NRT_WRITE64BE</name>
        <param><defname>P</defname></param>
        <param><defname>V</defname></param>
        <initializer>	((P)[0] = (0xFF00000000000000 &amp; (V)) &gt;&gt; 070, \
	 (P)[1] = (0x00FF000000000000 &amp; (V)) &gt;&gt; 060, \
	 (P)[2] = (0x0000FF0000000000 &amp; (V)) &gt;&gt; 050, \
	 (P)[3] = (0x000000FF00000000 &amp; (V)) &gt;&gt; 040, \
	 (P)[4] = (0x00000000FF000000 &amp; (V)) &gt;&gt; 030, \
	 (P)[5] = (0x0000000000FF0000 &amp; (V)) &gt;&gt; 020, \
	 (P)[6] = (0x000000000000FF00 &amp; (V)) &gt;&gt; 010, \
	 (P)[7] = (0x00000000000000FF &amp; (V)) &gt;&gt; 000, (P) + 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="64" column="9" bodyfile="src/util/wire.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="wire_8h_1ac8016d4c4db158b8d9e95f0973739bf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t read16le</definition>
        <argsstring>(void *buffer)</argsstring>
        <name>read16le</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Reads 2 bytes of the buffer as an uint16_t in little endian order from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the read value</para>
</simplesect>
This file is part of BareSDK and licensed under the: BSD 3-Clause License Copyright (c) 2021, Matheus Xavier All rights reserved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="85" column="17" bodyfile="src/util/wire.c" bodystart="10" bodyend="13" declfile="src/util/wire.h" declline="85" declcolumn="17"/>
        <references refid="wire_8h_1a185ba45353875b6922b19a2d1d839dea" compoundref="wire_8h" startline="28">NRT_READ16LE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1a6192ec58340a967eaf4530b14e36cb54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t read16be</definition>
        <argsstring>(void *buffer)</argsstring>
        <name>read16be</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Reads 2 bytes of the buffer as an uint16_t in big endian order from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the read value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="93" column="17" bodyfile="src/util/wire.c" bodystart="15" bodyend="18" declfile="src/util/wire.h" declline="93" declcolumn="17"/>
        <references refid="wire_8h_1ac9da063913697daf1de00d9c7b0d4cd1" compoundref="wire_8h" startline="29">NRT_READ16BE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1a4530689aa1b10b5aae470bcac078986f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t read32le</definition>
        <argsstring>(void *buffer)</argsstring>
        <name>read32le</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Reads 4 bytes of the buffer as an uint32_t in little endian order from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the read value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="101" column="17" bodyfile="src/util/wire.c" bodystart="20" bodyend="23" declfile="src/util/wire.h" declline="101" declcolumn="17"/>
        <references refid="wire_8h_1a9b495ddf3b39ae81080154e295c084f1" compoundref="wire_8h" startline="30">NRT_READ32LE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1a6db418d1512e2419e8567328a16e60d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t read32be</definition>
        <argsstring>(void *buffer)</argsstring>
        <name>read32be</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Reads 4 bytes of the buffer as an uint32_t in big endian order from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the read value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="109" column="17" bodyfile="src/util/wire.c" bodystart="25" bodyend="28" declfile="src/util/wire.h" declline="109" declcolumn="17"/>
        <references refid="wire_8h_1a40433b828eb9604867a4cf802d78eee9" compoundref="wire_8h" startline="32">NRT_READ32BE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1a2ea367735e5725a663de290b2669fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t read64le</definition>
        <argsstring>(void *buffer)</argsstring>
        <name>read64le</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Reads 8 bytes of the buffer as an uint64_t in little endian order from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the read value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="117" column="17" bodyfile="src/util/wire.c" bodystart="30" bodyend="33" declfile="src/util/wire.h" declline="117" declcolumn="17"/>
        <references refid="wire_8h_1a79217b32c2056622baa4dad4a14f9187" compoundref="wire_8h" startline="34">NRT_READ64LE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1a3864b1b6a1628fe3362f25660c712c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t read64be</definition>
        <argsstring>(void *buffer)</argsstring>
        <name>read64be</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Reads 8 bytes of the buffer as an uint64_t in big endian order from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the read value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="125" column="17" bodyfile="src/util/wire.c" bodystart="35" bodyend="38" declfile="src/util/wire.h" declline="125" declcolumn="17"/>
        <references refid="wire_8h_1ac66fdee8548a2105d67a44e7804f7930" compoundref="wire_8h" startline="36">NRT_READ64BE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1ad2d79b3e7e6bdd714a09093600b47c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write16le</definition>
        <argsstring>(void *buffer, uint16_t value)</argsstring>
        <name>write16le</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Writes value as 2 bytes in little endian order to buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="132" column="13" bodyfile="src/util/wire.c" bodystart="40" bodyend="43" declfile="src/util/wire.h" declline="132" declcolumn="13"/>
        <references refid="wire_8h_1a9b0516e23f35b9a3da140be4be1e4cae" compoundref="wire_8h" startline="39">NRT_WRITE16LE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1af50b4025390307c9decde69de46fb762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write16be</definition>
        <argsstring>(void *buffer, uint16_t value)</argsstring>
        <name>write16be</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Writes value as 2 bytes in big endian order to buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="139" column="13" bodyfile="src/util/wire.c" bodystart="45" bodyend="48" declfile="src/util/wire.h" declline="139" declcolumn="13"/>
        <references refid="wire_8h_1acf25b536ffaeb72808752ea7d24af856" compoundref="wire_8h" startline="42">NRT_WRITE16BE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1a174840993bafe9356324cf630519f8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write32le</definition>
        <argsstring>(void *buffer, uint32_t value)</argsstring>
        <name>write32le</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Writes value as 4 bytes in little endian order to buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="146" column="13" bodyfile="src/util/wire.c" bodystart="50" bodyend="53" declfile="src/util/wire.h" declline="146" declcolumn="13"/>
        <references refid="wire_8h_1abf42d1c1bfd5b7dc57f3015a355cdc48" compoundref="wire_8h" startline="45">NRT_WRITE32LE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1a87004cdb11a4626c0b78b3cebec20bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write32be</definition>
        <argsstring>(void *buffer, uint32_t value)</argsstring>
        <name>write32be</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Writes value as 4 bytes in big endian order to buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="153" column="13" bodyfile="src/util/wire.c" bodystart="55" bodyend="58" declfile="src/util/wire.h" declline="153" declcolumn="13"/>
        <references refid="wire_8h_1a31a08a70dfa5775f8946a0718db61262" compoundref="wire_8h" startline="50">NRT_WRITE32BE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1ae49bcb10b4472e9520df613c5c655c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write64le</definition>
        <argsstring>(void *buffer, uint64_t value)</argsstring>
        <name>write64le</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Writes value as 8 bytes in little endian order to buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="160" column="13" bodyfile="src/util/wire.c" bodystart="60" bodyend="63" declfile="src/util/wire.h" declline="160" declcolumn="13"/>
        <references refid="wire_8h_1aeba9c7260507c2d4ccd8cbed46741b0a" compoundref="wire_8h" startline="55">NRT_WRITE64LE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1a811a743c2ebc56f21a658f1ae44c8526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write64be</definition>
        <argsstring>(void *buffer, uint64_t value)</argsstring>
        <name>write64be</name>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Writes value as 8 bytes in big endian order to buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="167" column="13" bodyfile="src/util/wire.c" bodystart="65" bodyend="68" declfile="src/util/wire.h" declline="167" declcolumn="13"/>
        <references refid="wire_8h_1a8363db86c2ee8f8df5f675f725ab6537" compoundref="wire_8h" startline="64">NRT_WRITE64BE</references>
      </memberdef>
      <memberdef kind="function" id="wire_8h_1a165d8c55da8cee302cf707949e98323a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t align</definition>
        <argsstring>(size_t value, uint8_t alignment)</argsstring>
        <name>align</name>
        <param>
          <type>size_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/wire.h" line="169" column="15" bodyfile="src/util/wire.c" bodystart="70" bodyend="73" declfile="src/util/wire.h" declline="169" declcolumn="15"/>
        <references refid="wire_8h_1ab06449599802dd97b52b2abf2c572a47" compoundref="wire_8h" startline="26">ALIGN</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRT_WIRE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_WIRE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;endian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__BYTE_ORDER)<sp/>&amp;&amp;<sp/>__BYTE_ORDER<sp/>==<sp/>__BIG_ENDIAN<sp/>||<sp/>defined(__BIG_ENDIAN__)<sp/>||<sp/>defined(__ARMEB__)<sp/>||<sp/>defined(__THUMBEB__)<sp/>||<sp/>defined(__AARCH64EB__)<sp/>||<sp/>defined(_MIBSEB)<sp/>||<sp/>defined(__MIBSEB)<sp/>||<sp/>defined(__MIBSEB__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BE_ARCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__BYTE_ORDER)<sp/>&amp;&amp;<sp/>__BYTE_ORDER<sp/>==<sp/>__LITTLE_ENDIAN<sp/>||<sp/>defined(__LITTLE_ENDIAN__)<sp/>||<sp/>defined(__ARMEL__)<sp/>||<sp/>defined(__THUMBEL__)<sp/>||<sp/>defined(__AARCH64EL__)<sp/>||<sp/>defined(_MIPSEL)<sp/>||<sp/>defined(__MIPSEL)<sp/>||<sp/>defined(__MIPSEL__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LE_ARCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>Unable<sp/>to<sp/>determine<sp/>arch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="wire_8h_1ab06449599802dd97b52b2abf2c572a47" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGN(value,<sp/>alignment)<sp/>(((value)<sp/>+<sp/>(alignment<sp/>-<sp/>1))<sp/>&amp;<sp/>~(alignment<sp/>-<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="wire_8h_1a185ba45353875b6922b19a2d1d839dea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_READ16LE(S)<sp/>((255<sp/>&amp;<sp/>(S)[1])<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>(255<sp/>&amp;<sp/>(S)[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="wire_8h_1ac9da063913697daf1de00d9c7b0d4cd1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_READ16BE(S)<sp/>((255<sp/>&amp;<sp/>(S)[0])<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>(255<sp/>&amp;<sp/>(S)[1]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="wire_8h_1a9b495ddf3b39ae81080154e295c084f1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_READ32LE(S)<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((uint32_t)(255<sp/>&amp;<sp/>(S)[3])<sp/>&lt;&lt;<sp/>030<sp/>|<sp/>(uint32_t)(255<sp/>&amp;<sp/>(S)[2])<sp/>&lt;&lt;<sp/>020<sp/>|<sp/>(uint32_t)(255<sp/>&amp;<sp/>(S)[1])<sp/>&lt;&lt;<sp/>010<sp/>|<sp/>(uint32_t)(255<sp/>&amp;<sp/>(S)[0])<sp/>&lt;&lt;<sp/>000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="wire_8h_1a40433b828eb9604867a4cf802d78eee9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_READ32BE(S)<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((uint32_t)(255<sp/>&amp;<sp/>(S)[0])<sp/>&lt;&lt;<sp/>030<sp/>|<sp/>(uint32_t)(255<sp/>&amp;<sp/>(S)[1])<sp/>&lt;&lt;<sp/>020<sp/>|<sp/>(uint32_t)(255<sp/>&amp;<sp/>(S)[2])<sp/>&lt;&lt;<sp/>010<sp/>|<sp/>(uint32_t)(255<sp/>&amp;<sp/>(S)[3])<sp/>&lt;&lt;<sp/>000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="wire_8h_1a79217b32c2056622baa4dad4a14f9187" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_READ64LE(S)<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((uint64_t)(255<sp/>&amp;<sp/>(S)[7])<sp/>&lt;&lt;<sp/>070<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[6])<sp/>&lt;&lt;<sp/>060<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[5])<sp/>&lt;&lt;<sp/>050<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[4])<sp/>&lt;&lt;<sp/>040<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[3])<sp/>&lt;&lt;<sp/>030<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[2])<sp/>&lt;&lt;<sp/>020<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[1])<sp/>&lt;&lt;<sp/>010<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[0])<sp/>&lt;&lt;<sp/>000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="wire_8h_1ac66fdee8548a2105d67a44e7804f7930" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_READ64BE(S)<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((uint64_t)(255<sp/>&amp;<sp/>(S)[0])<sp/>&lt;&lt;<sp/>070<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[1])<sp/>&lt;&lt;<sp/>060<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[2])<sp/>&lt;&lt;<sp/>050<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[3])<sp/>&lt;&lt;<sp/>040<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[4])<sp/>&lt;&lt;<sp/>030<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[5])<sp/>&lt;&lt;<sp/>020<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[6])<sp/>&lt;&lt;<sp/>010<sp/>|<sp/>(uint64_t)(255<sp/>&amp;<sp/>(S)[7])<sp/>&lt;&lt;<sp/>000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="wire_8h_1a9b0516e23f35b9a3da140be4be1e4cae" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_WRITE16LE(P,<sp/>V)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((P)[0]<sp/>=<sp/>(0x00000000000000FF<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>000,<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[1]<sp/>=<sp/>(0x000000000000FF00<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>010,<sp/>(P)<sp/>+<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="wire_8h_1acf25b536ffaeb72808752ea7d24af856" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_WRITE16BE(P,<sp/>V)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((P)[0]<sp/>=<sp/>(0x000000000000FF00<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>010,<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[1]<sp/>=<sp/>(0x00000000000000FF<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>000,<sp/>(P)<sp/>+<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="wire_8h_1abf42d1c1bfd5b7dc57f3015a355cdc48" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_WRITE32LE(P,<sp/>V)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((P)[0]<sp/>=<sp/>(0x00000000000000FF<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>000,<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[1]<sp/>=<sp/>(0x000000000000FF00<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>010,<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[2]<sp/>=<sp/>(0x0000000000FF0000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>020,<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[3]<sp/>=<sp/>(0x00000000FF000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>030,<sp/>(P)<sp/>+<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="wire_8h_1a31a08a70dfa5775f8946a0718db61262" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_WRITE32BE(P,<sp/>V)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((P)[0]<sp/>=<sp/>(0x00000000FF000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>030,<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[1]<sp/>=<sp/>(0x0000000000FF0000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>020,<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[2]<sp/>=<sp/>(0x000000000000FF00<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>010,<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[3]<sp/>=<sp/>(0x00000000000000FF<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>000,<sp/>(P)<sp/>+<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="wire_8h_1aeba9c7260507c2d4ccd8cbed46741b0a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_WRITE64LE(P,<sp/>V)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((P)[0]<sp/>=<sp/>(0x00000000000000FF<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>000,<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[1]<sp/>=<sp/>(0x000000000000FF00<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>010,<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[2]<sp/>=<sp/>(0x0000000000FF0000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>020,<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[3]<sp/>=<sp/>(0x00000000FF000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>030,<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[4]<sp/>=<sp/>(0x000000FF00000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>040,<sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[5]<sp/>=<sp/>(0x0000FF0000000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>050,<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[6]<sp/>=<sp/>(0x00FF000000000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>060,<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[7]<sp/>=<sp/>(0xFF00000000000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>070,<sp/>(P)<sp/>+<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="wire_8h_1a8363db86c2ee8f8df5f675f725ab6537" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRT_WRITE64BE(P,<sp/>V)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((P)[0]<sp/>=<sp/>(0xFF00000000000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>070,<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[1]<sp/>=<sp/>(0x00FF000000000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>060,<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[2]<sp/>=<sp/>(0x0000FF0000000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>050,<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[3]<sp/>=<sp/>(0x000000FF00000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>040,<sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[4]<sp/>=<sp/>(0x00000000FF000000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>030,<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[5]<sp/>=<sp/>(0x0000000000FF0000<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>020,<sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[6]<sp/>=<sp/>(0x000000000000FF00<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>010,<sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(P)[7]<sp/>=<sp/>(0x00000000000000FF<sp/>&amp;<sp/>(V))<sp/>&gt;&gt;<sp/>000,<sp/>(P)<sp/>+<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>These<sp/>methods<sp/>are<sp/>simply<sp/>implementations<sp/>of<sp/>the<sp/>macros<sp/>as<sp/>functions</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>that<sp/>can<sp/>be<sp/>loaded<sp/>and<sp/>called<sp/>at<sp/>runtime.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="wire_8h_1ac8016d4c4db158b8d9e95f0973739bf1" kindref="member">read16le</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="wire_8h_1a6192ec58340a967eaf4530b14e36cb54" kindref="member">read16be</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="wire_8h_1a4530689aa1b10b5aae470bcac078986f" kindref="member">read32le</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="wire_8h_1a6db418d1512e2419e8567328a16e60d5" kindref="member">read32be</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="wire_8h_1a2ea367735e5725a663de290b2669fa97" kindref="member">read64le</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="wire_8h_1a3864b1b6a1628fe3362f25660c712c82" kindref="member">read64be</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wire_8h_1ad2d79b3e7e6bdd714a09093600b47c2d" kindref="member">write16le</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/>uint16_t<sp/>value);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wire_8h_1af50b4025390307c9decde69de46fb762" kindref="member">write16be</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/>uint16_t<sp/>value);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wire_8h_1a174840993bafe9356324cf630519f8bf" kindref="member">write32le</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wire_8h_1a87004cdb11a4626c0b78b3cebec20bcb" kindref="member">write32be</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wire_8h_1ae49bcb10b4472e9520df613c5c655c06" kindref="member">write64le</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/>uint64_t<sp/>value);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wire_8h_1a811a743c2ebc56f21a658f1ae44c8526" kindref="member">write64be</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/>uint64_t<sp/>value);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="wire_8h_1a165d8c55da8cee302cf707949e98323a" kindref="member">align</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value,<sp/>uint8_t<sp/>alignment);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/util/wire.h"/>
  </compounddef>
</doxygen>
