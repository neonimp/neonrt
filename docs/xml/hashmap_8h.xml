<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="hashmap_8h" kind="file" language="C++">
    <compoundname>hashmap.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="rt__buffer_8h" local="yes">../rt_buffer/rt_buffer.h</includes>
    <includedby refid="hashmap_8c" local="yes">src/containers/hashmap.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="1">
        <label>src/containers/hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>../rt_buffer/rt_buffer.h</label>
        <link refid="rt__buffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>memory.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/containers/hashmap.c</label>
        <link refid="hashmap_8c"/>
      </node>
      <node id="1">
        <label>src/containers/hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structhashmap__container" prot="public">hashmap_container</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="hashmap_8h_1a9a8155648e169681308f7b2d236b5318" prot="public" static="no">
        <name>_RTHOST_HASHMAP_</name>
        <briefdescription>
<para>Ready to use hashmaps. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="authors"><para>Matheus Xavier &lt;mxavier[AT]neonimp.com&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/hashmap.h" line="9" column="9" bodyfile="src/containers/hashmap.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hashmap_8h_1ab9233a377da58454bab674f572b2a1ab" prot="public" static="no">
        <type>struct <ref refid="structhashmap__node" kindref="compound">hashmap_node</ref></type>
        <definition>typedef struct hashmap_node hmap_node_t</definition>
        <argsstring></argsstring>
        <name>hmap_node_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/hashmap.h" line="1" column="0" bodyfile="src/containers/hashmap.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hashmap_8h_1a25dc18ef717ac44b26d16317a472b21e" prot="public" static="no">
        <type>struct <ref refid="structhashmap__container" kindref="compound">hashmap_container</ref></type>
        <definition>typedef struct hashmap_container hmap_t</definition>
        <argsstring></argsstring>
        <name>hmap_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/hashmap.h" line="1" column="0" bodyfile="src/containers/hashmap.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="hashmap_8h_1a649840e5fc69944d322dfd812350a729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hashmap_8h_1a25dc18ef717ac44b26d16317a472b21e" kindref="member">hmap_t</ref> *</type>
        <definition>hmap_t* hashmap_new</definition>
        <argsstring>(size_t init_len, uint8_t *nonce, uint32_t load_lim, uint8_t expand_factor)</argsstring>
        <name>hashmap_new</name>
        <param>
          <type>size_t</type>
          <declname>init_len</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>load_lim</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>expand_factor</declname>
        </param>
        <briefdescription>
<para>Initialize a new hashmap with the options defined here, check the struct <ref refid="structhashmap__container" kindref="compound">hashmap_container</ref> for details on what each one does. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init_len</parametername>
</parameternamelist>
<parameterdescription>
<para>How many nodes worth of space to pre-allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonce</parametername>
</parameternamelist>
<parameterdescription>
<para>Append 64 bytes of this value to keys before hashing, if null nothing is appended. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>load_lim</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum load factor (used slots/currently allocated) before triggering expansion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expand_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>When expansion is triggered expand by this factor, recommended is 2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly initialized hashmap configured with the received parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/hashmap.h" line="63" column="15" bodyfile="src/containers/hashmap.c" bodystart="36" bodyend="65" declfile="src/containers/hashmap.h" declline="63" declcolumn="15"/>
        <references refid="structhashmap__container_1aa202e51accad981236be649818f2d8c3" compoundref="hashmap_8h" startline="39">hashmap_container::current_load</references>
        <references refid="structhashmap__node_1a735984d41155bc1032e09bece8f8d66d" compoundref="hashmap_8c" startline="8">hashmap_node::data</references>
        <references refid="structhashmap__container_1a4b684f3d7a56f6b875cd605a377fb4f0" compoundref="hashmap_8h" startline="29">hashmap_container::data</references>
        <references refid="structhashmap__container_1a9f0a1d93d8f645f240baf2dd107d1cc0" compoundref="hashmap_8h" startline="43">hashmap_container::expand_factor</references>
        <references refid="structhashmap__container_1a5946bceee9dc0829de045044f6a144f5" compoundref="hashmap_8h" startline="41">hashmap_container::expand_trig</references>
        <references refid="structhashmap__node_1a62f8f28ce929a73a8c4b2f1ecaa2cb4b" compoundref="hashmap_8c" startline="9">hashmap_node::key</references>
        <references refid="structhashmap__container_1a7360b55975153b822efc5217b7734e6a" compoundref="hashmap_8h" startline="30">hashmap_container::len</references>
        <references refid="structhashmap__container_1a5214dc62167eb6b22e83358d25b55198" compoundref="hashmap_8h" startline="45">hashmap_container::no_expand_auto</references>
        <references refid="structhashmap__container_1af602af589d5bc1af695356386bcb32a9" compoundref="hashmap_8h" startline="37">hashmap_container::nonce</references>
        <references refid="structhashmap__node_1aff591530a6cd1c4f252464700c01af78" compoundref="hashmap_8c" startline="7">hashmap_node::reclaim</references>
        <references refid="structhashmap__container_1a93117dee1e04da6ae0f1d97b53d17db0" compoundref="hashmap_8h" startline="31">hashmap_container::set</references>
      </memberdef>
      <memberdef kind="function" id="hashmap_8h_1a677123a939ba05d7ba7f79e2672be032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t hashmap_set</definition>
        <argsstring>(hmap_t *self, rt_buff_t *key, void *value)</argsstring>
        <name>hashmap_set</name>
        <param>
          <type><ref refid="hashmap_8h_1a25dc18ef717ac44b26d16317a472b21e" kindref="member">hmap_t</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the key to value on self. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The hashmap to set the key on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>A rt_buff to use as a key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to any value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success 1 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/hashmap.h" line="72" column="16" bodyfile="src/containers/hashmap.c" bodystart="67" bodyend="88" declfile="src/containers/hashmap.h" declline="72" declcolumn="16"/>
        <references refid="hashmap_8c_1a54728187cee662ba0e680a55e1dd4bef" compoundref="hashmap_8c" startline="12">check_init</references>
        <references refid="structhashmap__node_1a735984d41155bc1032e09bece8f8d66d" compoundref="hashmap_8c" startline="8">hashmap_node::data</references>
        <references refid="structhashmap__container_1a4b684f3d7a56f6b875cd605a377fb4f0" compoundref="hashmap_8h" startline="29">hashmap_container::data</references>
        <references refid="structmanaged__buffer_1abe222f6d3581e7920dcad5306cc906a8" compoundref="rt__buffer__private_8h" startline="9">managed_buffer::data</references>
        <references refid="structhashmap__node_1a62f8f28ce929a73a8c4b2f1ecaa2cb4b" compoundref="hashmap_8c" startline="9">hashmap_node::key</references>
        <references refid="structhashmap__container_1a7360b55975153b822efc5217b7734e6a" compoundref="hashmap_8h" startline="30">hashmap_container::len</references>
        <references refid="hashmap_8c_1a8b57f0ce7e665a3bf1149e9bc4382cdd" compoundref="hashmap_8c" startline="25" endline="34">make_index</references>
        <references refid="structhashmap__container_1af602af589d5bc1af695356386bcb32a9" compoundref="hashmap_8h" startline="37">hashmap_container::nonce</references>
        <references refid="structhashmap__node_1aff591530a6cd1c4f252464700c01af78" compoundref="hashmap_8c" startline="7">hashmap_node::reclaim</references>
        <references refid="rt__buffer_8c_1a039150cb6b9a685b4cc33a6532a79ec5" compoundref="rt__buffer_8c" startline="32" endline="40">rt_buff_borrow</references>
        <references refid="structhashmap__container_1a93117dee1e04da6ae0f1d97b53d17db0" compoundref="hashmap_8h" startline="31">hashmap_container::set</references>
        <references refid="hashmap_8c_1a9da9fdcd001aaa305040716ad4d08514" compoundref="hashmap_8c" startline="14" endline="23">update_load_factor</references>
      </memberdef>
      <memberdef kind="function" id="hashmap_8h_1aa182c5f85ff78966f6f5b460855c3518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* hashmap_get</definition>
        <argsstring>(hmap_t *self, rt_buff_t *key)</argsstring>
        <name>hashmap_get</name>
        <param>
          <type><ref refid="hashmap_8h_1a25dc18ef717ac44b26d16317a472b21e" kindref="member">hmap_t</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The hashmap to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>A rt_buff to use as a key </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/hashmap.h" line="80" column="13" bodyfile="src/containers/hashmap.c" bodystart="90" bodyend="104" declfile="src/containers/hashmap.h" declline="80" declcolumn="13"/>
        <references refid="hashmap_8c_1a54728187cee662ba0e680a55e1dd4bef" compoundref="hashmap_8c" startline="12">check_init</references>
        <references refid="structhashmap__node_1a735984d41155bc1032e09bece8f8d66d" compoundref="hashmap_8c" startline="8">hashmap_node::data</references>
        <references refid="structhashmap__container_1a4b684f3d7a56f6b875cd605a377fb4f0" compoundref="hashmap_8h" startline="29">hashmap_container::data</references>
        <references refid="structhashmap__node_1a62f8f28ce929a73a8c4b2f1ecaa2cb4b" compoundref="hashmap_8c" startline="9">hashmap_node::key</references>
        <references refid="structhashmap__container_1a7360b55975153b822efc5217b7734e6a" compoundref="hashmap_8h" startline="30">hashmap_container::len</references>
        <references refid="hashmap_8c_1a8b57f0ce7e665a3bf1149e9bc4382cdd" compoundref="hashmap_8c" startline="25" endline="34">make_index</references>
        <references refid="structhashmap__container_1af602af589d5bc1af695356386bcb32a9" compoundref="hashmap_8h" startline="37">hashmap_container::nonce</references>
        <references refid="structhashmap__node_1aff591530a6cd1c4f252464700c01af78" compoundref="hashmap_8c" startline="7">hashmap_node::reclaim</references>
      </memberdef>
      <memberdef kind="function" id="hashmap_8h_1a5feed1aa6dd34b11f5aa1f8e2007efd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* hashmap_evict</definition>
        <argsstring>(hmap_t *self, rt_buff_t *key)</argsstring>
        <name>hashmap_evict</name>
        <param>
          <type><ref refid="hashmap_8h_1a25dc18ef717ac44b26d16317a472b21e" kindref="member">hmap_t</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Mark a node for reuse, and return the value that was stored in it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The hashmap to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>A rt_buff to use as a key </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value held in the key previously </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/hashmap.h" line="88" column="13" bodyfile="src/containers/hashmap.c" bodystart="106" bodyend="117" declfile="src/containers/hashmap.h" declline="88" declcolumn="13"/>
        <references refid="hashmap_8c_1a54728187cee662ba0e680a55e1dd4bef" compoundref="hashmap_8c" startline="12">check_init</references>
        <references refid="structhashmap__node_1a735984d41155bc1032e09bece8f8d66d" compoundref="hashmap_8c" startline="8">hashmap_node::data</references>
        <references refid="structhashmap__container_1a4b684f3d7a56f6b875cd605a377fb4f0" compoundref="hashmap_8h" startline="29">hashmap_container::data</references>
        <references refid="structhashmap__container_1a7360b55975153b822efc5217b7734e6a" compoundref="hashmap_8h" startline="30">hashmap_container::len</references>
        <references refid="hashmap_8c_1a8b57f0ce7e665a3bf1149e9bc4382cdd" compoundref="hashmap_8c" startline="25" endline="34">make_index</references>
        <references refid="structhashmap__container_1af602af589d5bc1af695356386bcb32a9" compoundref="hashmap_8h" startline="37">hashmap_container::nonce</references>
        <references refid="structhashmap__node_1aff591530a6cd1c4f252464700c01af78" compoundref="hashmap_8c" startline="7">hashmap_node::reclaim</references>
      </memberdef>
      <memberdef kind="function" id="hashmap_8h_1ae387ff612c8b5a8292adbd3132b302ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hashmap_evict_all</definition>
        <argsstring>(hmap_t *self)</argsstring>
        <name>hashmap_evict_all</name>
        <param>
          <type><ref refid="hashmap_8h_1a25dc18ef717ac44b26d16317a472b21e" kindref="member">hmap_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Evict all the slots in the hashmap, effectively clearing it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The hashmap to clear </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/hashmap.h" line="94" column="13" declfile="src/containers/hashmap.h" declline="94" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="hashmap_8h_1ac91522a203c1e61da2e25226e1edac94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hashmap_free</definition>
        <argsstring>(hmap_t *self)</argsstring>
        <name>hashmap_free</name>
        <param>
          <type><ref refid="hashmap_8h_1a25dc18ef717ac44b26d16317a472b21e" kindref="member">hmap_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Release the memory associated to a hashmap and it&apos;s nodes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The hashmap to destroy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/hashmap.h" line="100" column="13" bodyfile="src/containers/hashmap.c" bodystart="119" bodyend="132" declfile="src/containers/hashmap.h" declline="100" declcolumn="13"/>
        <references refid="structhashmap__container_1a4b684f3d7a56f6b875cd605a377fb4f0" compoundref="hashmap_8h" startline="29">hashmap_container::data</references>
        <references refid="structhashmap__node_1a62f8f28ce929a73a8c4b2f1ecaa2cb4b" compoundref="hashmap_8c" startline="9">hashmap_node::key</references>
        <references refid="structhashmap__container_1a7360b55975153b822efc5217b7734e6a" compoundref="hashmap_8h" startline="30">hashmap_container::len</references>
        <references refid="rt__buffer_8c_1a4da470bcb0ae4527593db158cb5a8991" compoundref="rt__buffer_8c" startline="71" endline="81">rt_buff_free</references>
        <references refid="rt__buffer_8c_1ac7340ae596e0437520aa52a2b514c961" compoundref="rt__buffer_8c" startline="62" endline="69">rt_buff_return</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="hashmap_8h_1ab9233a377da58454bab674f572b2a1ab" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_RTHOST_HASHMAP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="hashmap_8h_1a9a8155648e169681308f7b2d236b5318" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_RTHOST_HASHMAP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../rt_buffer/rt_buffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhashmap__node" kindref="compound">hashmap_node</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhashmap__node" kindref="compound">hashmap_node</ref><sp/><ref refid="structhashmap__node" kindref="compound">hmap_node_t</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structhashmap__container" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhashmap__container" kindref="compound">hashmap_container</ref><sp/>{</highlight></codeline>
<codeline lineno="29" refid="structhashmap__container_1a4b684f3d7a56f6b875cd605a377fb4f0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structhashmap__node" kindref="compound">hmap_node_t</ref><sp/>*<ref refid="structhashmap__container_1a4b684f3d7a56f6b875cd605a377fb4f0" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="30" refid="structhashmap__container_1a7360b55975153b822efc5217b7734e6a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structhashmap__container_1a7360b55975153b822efc5217b7734e6a" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="31" refid="structhashmap__container_1a93117dee1e04da6ae0f1d97b53d17db0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structhashmap__container_1a93117dee1e04da6ae0f1d97b53d17db0" kindref="member">set</ref>;</highlight></codeline>
<codeline lineno="37" refid="structhashmap__container_1af602af589d5bc1af695356386bcb32a9" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="structhashmap__container_1af602af589d5bc1af695356386bcb32a9" kindref="member">nonce</ref>;</highlight></codeline>
<codeline lineno="39" refid="structhashmap__container_1aa202e51accad981236be649818f2d8c3" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structhashmap__container_1aa202e51accad981236be649818f2d8c3" kindref="member">current_load</ref>;</highlight></codeline>
<codeline lineno="41" refid="structhashmap__container_1a5946bceee9dc0829de045044f6a144f5" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structhashmap__container_1a5946bceee9dc0829de045044f6a144f5" kindref="member">expand_trig</ref>;</highlight></codeline>
<codeline lineno="43" refid="structhashmap__container_1a9f0a1d93d8f645f240baf2dd107d1cc0" refkind="member"><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structhashmap__container_1a9f0a1d93d8f645f240baf2dd107d1cc0" kindref="member">expand_factor</ref>;</highlight></codeline>
<codeline lineno="45" refid="structhashmap__container_1a5214dc62167eb6b22e83358d25b55198" refkind="member"><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structhashmap__container_1a5214dc62167eb6b22e83358d25b55198" kindref="member">no_expand_auto</ref>:<sp/>1;</highlight></codeline>
<codeline lineno="46" refid="structhashmap__container_1acb7bc06bed6f6408d719334fc41698c7" refkind="member"><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structhashmap__container_1acb7bc06bed6f6408d719334fc41698c7" kindref="member">reserved</ref>:<sp/>7;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhashmap__container" kindref="compound">hashmap_container</ref><sp/><ref refid="structhashmap__container" kindref="compound">hmap_t</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structhashmap__container" kindref="compound">hmap_t</ref><sp/>*<ref refid="hashmap_8h_1a649840e5fc69944d322dfd812350a729" kindref="member">hashmap_new</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>init_len,<sp/>uint8_t<sp/>*<ref refid="structhashmap__container_1af602af589d5bc1af695356386bcb32a9" kindref="member">nonce</ref>,<sp/>uint32_t<sp/>load_lim,<sp/>uint8_t<sp/><ref refid="structhashmap__container_1a9f0a1d93d8f645f240baf2dd107d1cc0" kindref="member">expand_factor</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int32_t<sp/><ref refid="hashmap_8h_1a677123a939ba05d7ba7f79e2672be032" kindref="member">hashmap_set</ref>(<ref refid="structhashmap__container" kindref="compound">hmap_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="hashmap_8h_1aa182c5f85ff78966f6f5b460855c3518" kindref="member">hashmap_get</ref>(<ref refid="structhashmap__container" kindref="compound">hmap_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*key);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="hashmap_8h_1a5feed1aa6dd34b11f5aa1f8e2007efd0" kindref="member">hashmap_evict</ref>(<ref refid="structhashmap__container" kindref="compound">hmap_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*key);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="hashmap_8h_1ae387ff612c8b5a8292adbd3132b302ab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hashmap_8h_1ae387ff612c8b5a8292adbd3132b302ab" kindref="member">hashmap_evict_all</ref>(<ref refid="structhashmap__container" kindref="compound">hmap_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hashmap_8h_1ac91522a203c1e61da2e25226e1edac94" kindref="member">hashmap_free</ref>(<ref refid="structhashmap__container" kindref="compound">hmap_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>END<sp/>_RTHOST_HASHMAP_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/containers/hashmap.h"/>
  </compounddef>
</doxygen>
