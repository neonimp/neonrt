<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="rt__buffer_8h" kind="file" language="C++">
    <compoundname>rt_buffer.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">memory.h</includes>
    <includedby refid="hashmap_8h" local="yes">src/containers/hashmap.h</includedby>
    <includedby refid="rt__buffer_8c" local="yes">src/rt_buffer/rt_buffer.c</includedby>
    <includedby refid="rt__buffer__private_8h" local="yes">src/rt_buffer/rt_buffer_private.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>src/rt_buffer/rt_buffer.h</label>
        <link refid="rt__buffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>memory.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>src/containers/hashmap.c</label>
        <link refid="hashmap_8c"/>
      </node>
      <node id="2">
        <label>src/containers/hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/rt_buffer/rt_buffer.c</label>
        <link refid="rt__buffer_8c"/>
      </node>
      <node id="1">
        <label>src/rt_buffer/rt_buffer.h</label>
        <link refid="rt__buffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/rt_buffer/rt_buffer_private.h</label>
        <link refid="rt__buffer__private_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="rt__buffer_8h_1a68d3ba0fdbc03ebcd0fd2282ce1d4cbf" prot="public" static="no">
        <name>_RTHOST_STRING_</name>
        <briefdescription>
<para>Strings that are more than a byte array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="authors"><para>Matheus Xavier &lt;mxavier[AT]neonimp.com&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.h" line="9" column="9" bodyfile="src/rt_buffer/rt_buffer.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" prot="public" static="no">
        <type>struct <ref refid="structmanaged__buffer" kindref="compound">managed_buffer</ref></type>
        <definition>typedef struct managed_buffer rt_buff_t</definition>
        <argsstring></argsstring>
        <name>rt_buff_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.h" line="1" column="0" bodyfile="src/rt_buffer/rt_buffer.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="rt__buffer_8h_1a1322b1a2eb1595bed6cca6f6cf42281c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
        <definition>rt_buff_t* rt_buff_new</definition>
        <argsstring>(uint8_t *value, size_t val_len)</argsstring>
        <name>rt_buff_new</name>
        <param>
          <type>uint8_t *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>val_len</declname>
        </param>
        <briefdescription>
<para>Create a new managed string from a buffer of bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to initialize the managed string with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer <computeroutput>value</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to an initialized rt_buff_t instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.h" line="26" column="18" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="6" bodyend="30" declfile="src/rt_buffer/rt_buffer.h" declline="26" declcolumn="18"/>
        <references refid="structmanaged__buffer_1abe222f6d3581e7920dcad5306cc906a8" compoundref="rt__buffer__private_8h" startline="9">managed_buffer::data</references>
        <references refid="structmanaged__buffer_1a7360b55975153b822efc5217b7734e6a" compoundref="rt__buffer__private_8h" startline="10">managed_buffer::len</references>
        <references refid="structmanaged__buffer_1a26e9c310f0ff6151d48550c2b6b2b185" compoundref="rt__buffer__private_8h" startline="14">managed_buffer::lock</references>
        <references refid="structmanaged__buffer_1ac7cadaef976091745f65e9cd21fe4cfe" compoundref="rt__buffer__private_8h" startline="13">managed_buffer::needs_sync</references>
        <references refid="structmanaged__buffer_1af4f32f042f9ebac3aaf3870d88482e59" compoundref="rt__buffer__private_8h" startline="11">managed_buffer::ref_ct</references>
      </memberdef>
      <memberdef kind="function" id="rt__buffer_8h_1a039150cb6b9a685b4cc33a6532a79ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* rt_buff_borrow</definition>
        <argsstring>(rt_buff_t *self)</argsstring>
        <name>rt_buff_borrow</name>
        <param>
          <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Get a reference to the underlying buffer of a managed string to use with functions that need a raw const char pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Never pass this pointer to a function that modifies the buffer in place, as this cause for UNDEFINED BEHAVIOUR, since the properties of the buffer are tracked by the internal state. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the managed string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the underlying buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.h" line="37" column="19" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="32" bodyend="40" declfile="src/rt_buffer/rt_buffer.h" declline="37" declcolumn="19"/>
        <references refid="structmanaged__buffer_1abe222f6d3581e7920dcad5306cc906a8" compoundref="rt__buffer__private_8h" startline="9">managed_buffer::data</references>
        <references refid="structmanaged__buffer_1a26e9c310f0ff6151d48550c2b6b2b185" compoundref="rt__buffer__private_8h" startline="14">managed_buffer::lock</references>
        <references refid="structmanaged__buffer_1af4f32f042f9ebac3aaf3870d88482e59" compoundref="rt__buffer__private_8h" startline="11">managed_buffer::ref_ct</references>
        <referencedby refid="hashmap_8c_1a677123a939ba05d7ba7f79e2672be032" compoundref="hashmap_8c" startline="67" endline="88">hashmap_set</referencedby>
        <referencedby refid="hashmap_8c_1a8b57f0ce7e665a3bf1149e9bc4382cdd" compoundref="hashmap_8c" startline="25" endline="34">make_index</referencedby>
      </memberdef>
      <memberdef kind="function" id="rt__buffer_8h_1a9cd5013b1401115a2d15f5c6674ca261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* rt_buff_borrow_writable</definition>
        <argsstring>(rt_buff_t *self)</argsstring>
        <name>rt_buff_borrow_writable</name>
        <param>
          <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Get a write-able reference to the underlying buffer of a managed string to use with functions that need a raw const char pointer, note that the write-able reference MUST BE the only reference, this function will fail if ANY of the following is true: There is already ANY references to the buffer leased out. There is a lock on the string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Never pass this pointer to a function that modifies the buffer in place, as this cause for UNDEFINED BEHAVIOUR, since the properties of the buffer are tracked by the internal state. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the managed string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the underlying buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.h" line="52" column="13" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="42" bodyend="55" declfile="src/rt_buffer/rt_buffer.h" declline="52" declcolumn="13"/>
        <references refid="structmanaged__buffer_1abe222f6d3581e7920dcad5306cc906a8" compoundref="rt__buffer__private_8h" startline="9">managed_buffer::data</references>
        <references refid="structmanaged__buffer_1a26e9c310f0ff6151d48550c2b6b2b185" compoundref="rt__buffer__private_8h" startline="14">managed_buffer::lock</references>
        <references refid="structmanaged__buffer_1ac7cadaef976091745f65e9cd21fe4cfe" compoundref="rt__buffer__private_8h" startline="13">managed_buffer::needs_sync</references>
        <references refid="structmanaged__buffer_1af4f32f042f9ebac3aaf3870d88482e59" compoundref="rt__buffer__private_8h" startline="11">managed_buffer::ref_ct</references>
      </memberdef>
      <memberdef kind="function" id="rt__buffer_8h_1ac7340ae596e0437520aa52a2b514c961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rt_buff_return</definition>
        <argsstring>(rt_buff_t *self)</argsstring>
        <name>rt_buff_return</name>
        <param>
          <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Returns a borrowed reference to the underlying buffer and decreases the reference counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the managed string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.h" line="59" column="13" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="62" bodyend="69" declfile="src/rt_buffer/rt_buffer.h" declline="59" declcolumn="13"/>
        <references refid="structmanaged__buffer_1a26e9c310f0ff6151d48550c2b6b2b185" compoundref="rt__buffer__private_8h" startline="14">managed_buffer::lock</references>
        <references refid="structmanaged__buffer_1ac7cadaef976091745f65e9cd21fe4cfe" compoundref="rt__buffer__private_8h" startline="13">managed_buffer::needs_sync</references>
        <references refid="structmanaged__buffer_1af4f32f042f9ebac3aaf3870d88482e59" compoundref="rt__buffer__private_8h" startline="11">managed_buffer::ref_ct</references>
        <referencedby refid="hashmap_8c_1ac91522a203c1e61da2e25226e1edac94" compoundref="hashmap_8c" startline="119" endline="132">hashmap_free</referencedby>
        <referencedby refid="rt__buffer_8c_1a4da470bcb0ae4527593db158cb5a8991" compoundref="rt__buffer_8c" startline="71" endline="81">rt_buff_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="rt__buffer_8h_1abb767504584d542d819c76d09ebeded5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rt_buff_sizeof</definition>
        <argsstring>(const rt_buff_t *self)</argsstring>
        <name>rt_buff_sizeof</name>
        <param>
          <type>const <ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Get the size of the underlying buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to get the size of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.h" line="66" column="15" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="57" bodyend="60" declfile="src/rt_buffer/rt_buffer.h" declline="66" declcolumn="15"/>
        <references refid="structmanaged__buffer_1a7360b55975153b822efc5217b7734e6a" compoundref="rt__buffer__private_8h" startline="10">managed_buffer::len</references>
        <referencedby refid="hashmap_8c_1a8b57f0ce7e665a3bf1149e9bc4382cdd" compoundref="hashmap_8c" startline="25" endline="34">make_index</referencedby>
      </memberdef>
      <memberdef kind="function" id="rt__buffer_8h_1a4da470bcb0ae4527593db158cb5a8991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t rt_buff_free</definition>
        <argsstring>(rt_buff_t *self)</argsstring>
        <name>rt_buff_free</name>
        <param>
          <type><ref refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" kindref="member">rt_buff_t</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Destroys a managed string if it&apos;s reference counter is 0, and there is no lock on it, do not use a reference to a string passed to this function after calling it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to attempt destruction on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the string was deallocated successfully or the refcount otherwise, check the result!. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rt_buffer/rt_buffer.h" line="76" column="17" bodyfile="src/rt_buffer/rt_buffer.c" bodystart="71" bodyend="81" declfile="src/rt_buffer/rt_buffer.h" declline="76" declcolumn="17"/>
        <references refid="structmanaged__buffer_1abe222f6d3581e7920dcad5306cc906a8" compoundref="rt__buffer__private_8h" startline="9">managed_buffer::data</references>
        <references refid="structmanaged__buffer_1a26e9c310f0ff6151d48550c2b6b2b185" compoundref="rt__buffer__private_8h" startline="14">managed_buffer::lock</references>
        <references refid="structmanaged__buffer_1af4f32f042f9ebac3aaf3870d88482e59" compoundref="rt__buffer__private_8h" startline="11">managed_buffer::ref_ct</references>
        <references refid="rt__buffer_8c_1ac7340ae596e0437520aa52a2b514c961" compoundref="rt__buffer_8c" startline="62" endline="69">rt_buff_return</references>
        <referencedby refid="hashmap_8c_1ac91522a203c1e61da2e25226e1edac94" compoundref="hashmap_8c" startline="119" endline="132">hashmap_free</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="rt__buffer_8h_1a5fe3fb8c3544e150d09f7b020540ea06" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_RTHOST_STRING_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="rt__buffer_8h_1a68d3ba0fdbc03ebcd0fd2282ce1d4cbf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_RTHOST_STRING_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmanaged__buffer" kindref="compound">managed_buffer</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmanaged__buffer" kindref="compound">managed_buffer</ref><sp/><ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*<ref refid="rt__buffer_8h_1a1322b1a2eb1595bed6cca6f6cf42281c" kindref="member">rt_buff_new</ref>(uint8_t<sp/>*value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>val_len);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="rt__buffer_8h_1a039150cb6b9a685b4cc33a6532a79ec5" kindref="member">rt_buff_borrow</ref>(<ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="rt__buffer_8h_1a9cd5013b1401115a2d15f5c6674ca261" kindref="member">rt_buff_borrow_writable</ref>(<ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rt__buffer_8h_1ac7340ae596e0437520aa52a2b514c961" kindref="member">rt_buff_return</ref>(<ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="rt__buffer_8h_1abb767504584d542d819c76d09ebeded5" kindref="member">rt_buff_sizeof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="rt__buffer_8h_1a4da470bcb0ae4527593db158cb5a8991" kindref="member">rt_buff_free</ref>(<ref refid="structmanaged__buffer" kindref="compound">rt_buff_t</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>END<sp/>_RTHOST_STRING_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/rt_buffer/rt_buffer.h"/>
  </compounddef>
</doxygen>
